BROKER SCHEMA common


CREATE COMPUTE MODULE logger_LogMsg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE SenderOrg       CHARACTER;
		DECLARE Sender          CHARACTER;
		DECLARE ReceiverOrg     CHARACTER;
		DECLARE Receiver        CHARACTER;
		DECLARE Uuid	        CHARACTER;
		DECLARE Msg		        CHARACTER;
		DECLARE MsgType	        INTEGER;
		DECLARE LogTimestamp	CHARACTER;
		DECLARE Creator	        CHARACTER;
		
		--DECLARE ResponseCode    INTEGER 0;
		--DECLARE ResponseMsg     CHARACTER;
		--DECLARE SQLState1 CHARACTER;   
		--DECLARE SQLErrorText1 CHARACTER;   
		--DECLARE SQLCode1 INTEGER;   
		--DECLARE SQLNativeError1 INTEGER; 
		
		SET ServiceCode = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_ServiceCode);
		SET ServiceVersion = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_Version);
		SET SenderOrg = InputRoot.XMLNSC.Msg.Head.Svc_Sender_Org;
		SET Sender = InputRoot.XMLNSC.Msg.Head.Svc_Sender;
		SET ReceiverOrg = InputRoot.XMLNSC.Msg.Head.Svc_Receiver_Org;
		SET Receiver = InputRoot.XMLNSC.Msg.Head.Svc_Receiver;
		SET Uuid = InputRoot.XMLNSC.Msg.Head.Svc_SerialNumber;
		SET Msg = CAST(ASBITSTREAM(InputRoot.XMLNSC) AS CHARACTER CCSID 1381);
		SET MsgType = CAST(InputLocalEnvironment.msgType AS INTEGER);
		SET LogTimestamp = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
		SET Creator = 'MDXP Node';
		
		INSERT INTO Database.ESBDS.ESB.MSGFLOW_LOG(PK_LOG,SERVICE_CODE,SERVICE_VERSION,SENDER_ORG,SENDER,RECEIVER_ORG,RECEIVER,SERIAL_NUMBER,MSG,MSG_TYPE,LOG_TIMESTAMP,CREATOR) VALUES (UUIDASCHAR,ServiceCode,ServiceVersion,SenderOrg,Sender,ReceiverOrg,Receiver,Uuid,Msg,MsgType,CURRENT_TIMESTAMP,Creator);
	    
		--Retrieve the database return codes --
		--SET SQLState1 = SQLSTATE;
		--SET SQLCode1 = SQLCODE;
		--SET SQLErrorText1 = SQLERRORTEXT;
		--SET SQLNativeError1 = SQLNATIVEERROR;
		
		--IF (SQLCode1 <> 0) THEN
			--SET ResponseCode = 500;
			--SET ResponseMsg = 'Failed to access database. SQLCODE=' || CAST(SQLCode1 AS CHARACTER) || '; SQLNativeError=' || CAST(SQLNativeError1 AS CHARACTER) || '; SQLSTATE=' || SQLState1 || '; SQLErrorText=' || SQLErrorText1;
			--SET InputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			--SET InputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			--RETURN FALSE;
		--ELSE
			--SET ResponseCode = 200;
			--SET ResponseMsg = 'Operation Successfully.';
			--SET InputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			--SET InputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			--RETURN TRUE;
		--END IF;
		RETURN TRUE;
	END;

END MODULE;
