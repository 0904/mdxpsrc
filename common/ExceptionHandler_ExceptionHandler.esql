BROKER SCHEMA common


CREATE COMPUTE MODULE ExceptionHandler_ExceptionHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF HttpExceptionHandler() THEN
			IF OutputLocalEnvironment.HttpRetry = 'Y' THEN
				-- set token
				CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC NAME 'HTTPRequestHeader';
				SET OutputRoot.HTTPRequestHeader.Authorization = 'Bearer QWRtaW4tZjJlNTVjZTEtYzk4NC00MzgzLTkxYjctMGRlNGRjNmExNjgx';
				RETURN TRUE;
			ELSE
				IF OutputLocalEnvironment.HttpRetry = 'N' THEN
					PROPAGATE TO TERMINAL 'failure';
					RETURN FALSE;
				END IF;
			END IF;
		ELSE
			IF CommonExceptionHandler() THEN
				PROPAGATE TO TERMINAL 'failure';
				RETURN FALSE;
			END IF;	
		END IF;
		SET OutputRoot = InputRoot;
		PROPAGATE TO TERMINAL 'failure';
		RETURN FALSE;
	END;
	
	CREATE PROCEDURE HttpExceptionHandler() RETURNS BOOLEAN
	BEGIN
		DECLARE results			BOOLEAN;
		DECLARE ResponseCode    INTEGER 0;
		DECLARE ResponseMsg     CHARACTER;
		DECLARE ExceptionList   CHARACTER;
		DECLARE errorCount 		Integer 0;
		DECLARE connectionError	BOOLEAN;
		
		IF EXISTS(InputRoot.HTTPResponseHeader[]) THEN 
			-- http retry logic
			SET errorCount = CAST((InputLocalEnvironment.ErrorCount) AS INTEGER);
			IF errorCount IS NULL THEN
				SET errorCount = 1;
			ELSE 
				SET errorCount = errorCount + 1;
			END IF;

			IF CAST(errorCount AS INTEGER) < 4 AND EXISTS(InputLocalEnvironment.output.MQMD[]) THEN
				-- copy Msg in OutputRoot
				DELETE FIELD OutputRoot.XMLNSC;
				CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' NAME 'XMLNSC';
				CREATE FIRSTCHILD OF OutputRoot.XMLNSC TYPE XMLNSC.XmlDeclaration NAME 'XmlDeclaration'; 
				SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Version = '1.0'; 
				SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'UTF-8';
				SET OutputRoot.XMLNSC.Msg = InputLocalEnvironment.output.XMLNSC.Msg;
				SET OutputRoot.MQMD = InputLocalEnvironment.output.MQMD;
				SET OutputRoot.Properties = InputLocalEnvironment.output.Properties;
				SET OutputLocalEnvironment = InputLocalEnvironment;
				SET OutputLocalEnvironment.ErrorCount = CAST(errorCount AS CHARACTER);
				SET OutputLocalEnvironment.HttpRetry = 'Y';
			ELSE
				SET ResponseCode = CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" AS INTEGER);
				SET ResponseMsg = CAST(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Line" AS CHARACTER);
				-- copy Msg in OutputRoot
				DELETE FIELD OutputRoot.XMLNSC;
				CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' NAME 'XMLNSC';
				CREATE FIRSTCHILD OF OutputRoot.XMLNSC TYPE XMLNSC.XmlDeclaration NAME 'XmlDeclaration'; 
				SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Version = '1.0'; 
				SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'UTF-8';
				SET OutputRoot.XMLNSC.Msg = InputLocalEnvironment.output.XMLNSC.Msg;
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
				SET OutputLocalEnvironment.HttpRetry = 'N';
			END IF;
							
			RETURN TRUE;
		ELSE
			SET results = CONTAINS(InputExceptionList.RecoverableException.Label, 'HTTP');
			-- set http error 210
			IF results THEN		
				-- http retry logic
				SET errorCount = CAST((InputLocalEnvironment.ErrorCount) AS INTEGER);
				IF errorCount IS NULL THEN
					SET errorCount = 1;
				ELSE 
					SET errorCount = errorCount + 1;
				END IF;

				IF CAST(errorCount AS INTEGER) < 4 AND EXISTS(InputLocalEnvironment.output.MQMD[]) THEN
					-- copy Msg in OutputRoot
					DELETE FIELD OutputRoot.XMLNSC;
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' NAME 'XMLNSC';
					CREATE FIRSTCHILD OF OutputRoot.XMLNSC TYPE XMLNSC.XmlDeclaration NAME 'XmlDeclaration'; 
					SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Version = '1.0'; 
					SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'UTF-8';
					SET OutputRoot.XMLNSC.Msg = InputLocalEnvironment.output.XMLNSC.Msg;
					SET OutputRoot.MQMD = InputLocalEnvironment.output.MQMD;
					SET OutputRoot.Properties = InputLocalEnvironment.output.Properties;
					SET OutputLocalEnvironment = InputLocalEnvironment;
					SET OutputLocalEnvironment.ErrorCount = CAST(errorCount AS CHARACTER);
					SET OutputLocalEnvironment.HttpRetry = 'Y';
				ELSE
					SET ResponseCode = 210;
					-- temp save InputExceptionList to OutputRoot.XML for parsering
					Create LASTCHILD of OutputRoot DOMAIN('XML') Name 'XML'; 
					SET OutputRoot.XML.ExceptionList = InputExceptionList;
					SET ResponseMsg = CAST(ASBITSTREAM(OutputRoot.XML.ExceptionList) AS CHARACTER CCSID 1381);
					DELETE FIELD OutputRoot.XML;
					
					-- Create a reference to the first child of the exception list
			   	    --declare ptrException reference to InputExceptionList.*[1];
			   	    -- keep looping while the moves to the child of exception list work 
					--WHILE lastmove(ptrException) DO
						-- store the current values for the error number and text
						--IF ptrException.Number is not null THEN
			        		--SET ResponseCode = ptrException.Number;
			        		--SET ResponseMsg = ptrException.Text;
			  			--END IF;
			  			-- now move to the last child which should be the next exceptionlist
						--move ptrException lastchild;
					--END WHILE; 
					
					-- copy Msg in OutputRoot
					DELETE FIELD OutputRoot.XMLNSC;
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' NAME 'XMLNSC';
					CREATE FIRSTCHILD OF OutputRoot.XMLNSC TYPE XMLNSC.XmlDeclaration NAME 'XmlDeclaration'; 
					SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Version = '1.0'; 
					SET OutputRoot.XMLNSC.(XMLNSC.XmlDeclaration)*.(XMLNSC.Attribute)Encoding = 'UTF-8';
					SET OutputRoot.XMLNSC.Msg = InputLocalEnvironment.output.XMLNSC.Msg;
					SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
					SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
					SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
					SET OutputLocalEnvironment.HttpRetry = 'N';
				END IF;	
				RETURN TRUE;
			ELSE
				RETURN FALSE;
			END IF;
		END IF;
	END;
		
	CREATE PROCEDURE CommonExceptionHandler() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DECLARE results			BOOLEAN;
		DECLARE ResponseCode    INTEGER 0;
		DECLARE ResponseMsg     CHARACTER;
		
		-- temp save InputExceptionList to OutputRoot.XML for parsering
		Create LASTCHILD of OutputRoot DOMAIN('XML') Name 'XML'; 
		SET OutputRoot.XML.ExceptionList = InputExceptionList;
		SET ResponseMsg = CAST(ASBITSTREAM(OutputRoot.XML.ExceptionList) AS CHARACTER CCSID 1381);
		DELETE FIELD OutputRoot.XML;
		IF ResponseMsg IS NOT NULL AND TRIM(ResponseMsg) <> '' THEN
			SET ResponseCode = 404;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');			
		END IF;
		
		IF OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode IS NULL OR TRIM(OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode) = '' THEN
			SET ResponseCode = 501;
			SET ResponseMsg = 'Failed with UNKNOWN errors';
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
		END IF;
		RETURN TRUE;
	END;
END MODULE;
