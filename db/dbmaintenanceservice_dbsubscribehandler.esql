BROKER SCHEMA db


CREATE COMPUTE MODULE dbmaintenanceservice_dbsubscribehandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DECLARE I INTEGER 0;
		DECLARE J INTEGER;
		SET J = CARDINALITY(OutputRoot.XMLNSC.Msg.Body.SubScribes.SubScribe[]);
		WHILE I < J DO
			DECLARE RF_SubScribe REFERENCE TO OutputRoot.XMLNSC.Msg.Body.SubScribes.SubScribe[I];
			IF CONTAINS(OutputRoot.XMLNSC.Msg.Head.Svc_ServiceCode, 'ADD') THEN
				CALL DBSubScribeHandler_add(RF_SubScribe);
			ELSEIF CONTAINS(OutputRoot.XMLNSC.Msg.Head.Svc_ServiceCode, 'DEL') THEN
				CALL DBSubScribeHandler_del(RF_SubScribe);
			END IF;
			SET I = I + 1;
		END WHILE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE DBSubScribeHandler_add(IN RF_SubScribe REFERENCE) BEGIN
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE SenderOrg       CHARACTER;
		DECLARE Sender          CHARACTER;
		DECLARE ReceiverOrg     CHARACTER;
		DECLARE Receiver        CHARACTER;
		DECLARE Enabled_Flag    INTEGER 1;
		DECLARE Remark	        CHARACTER;
		DECLARE InsTime	        CHARACTER;
		DECLARE LastUpdTime     CHARACTER;
		DECLARE Creator	        CHARACTER;
		DECLARE Modifier        CHARACTER;
		DECLARE ServiceType		CHARACTER;
		DECLARE ServiceMethod   CHARACTER;
		
		SET ServiceCode = TRIM(RF_SubScribe.Svc_ServiceCode);
		SET ServiceVersion = TRIM(RF_SubScribe.Svc_Version);
		SET InsTime = CURRENT_TIMESTAMP;
		SET LastUpdTime = CURRENT_TIMESTAMP;
		SET Creator = 'Admin';
		SET Modifier = 'Admin';
		SET ServiceType = CAST(RF_SubScribe.Svc_Type AS CHARACTER CCSID 1381);
		SET ServiceMethod = RF_SubScribe.Svc_Method;
		SET Sender = TRIM(RF_SubScribe.Svc_Sender);
		SET Receiver = TRIM(RF_SubScribe.Svc_Receiver);
		
		IF CONTAINS(Sender, ',') THEN
			CALL SPLIT(Sender, ',');
			DECLARE K INTEGER 0;
			DECLARE R INTEGER;
			SET R = CARDINALITY(OutputLocalEnvironment.Split.Columns[]);
			WHILE K < R DO
				SET Sender = OutputLocalEnvironment.Split.Columns[R];
				INSERT INTO ESB.ROUTE_CONFIG(PK_ROUTE,SERVICE_CODE,SERVICE_VERSION,SENDER_ORG,SENDER,RECEIVER_ORG,RECEIVER,ENABLED_FLAG,REMARK,INSERT_TIMESTAMP,LAST_UPDATE_TIMESTAMP,CREATOR,MODIFIER,SVC_TYPE,SVC_METHOD) VALUES (UUIDASCHAR,ServiceCode,ServiceVersion,SenderOrg,Sender,ReceiverOrg,Receiver,Enabled_Flag,Remark,InsTime,LastUpdTime,Creator,Modifier,ServiceType,ServiceMethod);
				SET K = K + 1;
			END WHILE;
		ELSEIF CONTAINS(Receiver, ',') THEN
			CALL SPLIT(Receiver, ',');
			DECLARE K INTEGER 0;
			DECLARE R INTEGER;
			SET R = CARDINALITY(OutputLocalEnvironment.Split.Columns[]);
			WHILE K < R DO
				SET Receiver = OutputLocalEnvironment.Split.Columns[R];
				INSERT INTO ESB.ROUTE_CONFIG(PK_ROUTE,SERVICE_CODE,SERVICE_VERSION,SENDER_ORG,SENDER,RECEIVER_ORG,RECEIVER,ENABLED_FLAG,REMARK,INSERT_TIMESTAMP,LAST_UPDATE_TIMESTAMP,CREATOR,MODIFIER,SVC_TYPE,SVC_METHOD) VALUES (UUIDASCHAR,ServiceCode,ServiceVersion,SenderOrg,Sender,ReceiverOrg,Receiver,Enabled_Flag,Remark,InsTime,LastUpdTime,Creator,Modifier,ServiceType,ServiceMethod);
				SET K = K + 1;
			END WHILE;
		ELSE
			INSERT INTO ESB.ROUTE_CONFIG(PK_ROUTE,SERVICE_CODE,SERVICE_VERSION,SENDER_ORG,SENDER,RECEIVER_ORG,RECEIVER,ENABLED_FLAG,REMARK,INSERT_TIMESTAMP,LAST_UPDATE_TIMESTAMP,CREATOR,MODIFIER,SVC_TYPE,SVC_METHOD) VALUES (UUIDASCHAR,ServiceCode,ServiceVersion,SenderOrg,Sender,ReceiverOrg,Receiver,Enabled_Flag,Remark,InsTime,LastUpdTime,Creator,Modifier,ServiceType,ServiceMethod);
		END IF;
		
	END;
	
	CREATE PROCEDURE DBSubScribeHandler_del(IN RF_SubScribe REFERENCE) BEGIN
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE Sender          CHARACTER;
		DECLARE Receiver        CHARACTER;
		DECLARE ServiceType		CHARACTER;
		
		SET ServiceCode = TRIM(RF_SubScribe.Svc_ServiceCode);
		SET ServiceVersion = TRIM(RF_SubScribe.Svc_Version);
		SET ServiceType = CAST(RF_SubScribe.Svc_Type AS CHARACTER CCSID 1381);
		SET Sender = TRIM(RF_SubScribe.Svc_Sender);
		SET Receiver = TRIM(RF_SubScribe.Svc_Receiver);
		
		IF CONTAINS(Sender, ',') THEN
			CALL SPLIT(Sender, ',');
			DECLARE K INTEGER 0;
			DECLARE R INTEGER;
			SET R = CARDINALITY(OutputLocalEnvironment.Split.Columns[]);
			WHILE K < R DO
				SET Sender = OutputLocalEnvironment.Split.Columns[R];
					DELETE FROM ESB.ROUTE_CONFIG AS T WHERE T.SERVICE_CODE = ServiceCode AND T.SENDER = Sender AND T.RECEIVER = Receiver AND T.SVC_TYPE = ServiceType;
				SET K = K + 1;
			END WHILE;
		ELSEIF CONTAINS(Receiver, ',') THEN
			CALL SPLIT(Receiver, ',');
			DECLARE K INTEGER 0;
			DECLARE R INTEGER;
			SET R = CARDINALITY(OutputLocalEnvironment.Split.Columns[]);
			WHILE K < R DO
				SET Receiver = OutputLocalEnvironment.Split.Columns[R];
					DELETE FROM ESB.ROUTE_CONFIG AS T WHERE T.SERVICE_CODE = ServiceCode AND T.SENDER = Sender AND T.RECEIVER = Receiver AND T.SVC_TYPE = ServiceType;
				SET K = K + 1;
			END WHILE;
		ELSE
			DELETE FROM ESB.ROUTE_CONFIG AS T WHERE T.SERVICE_CODE = ServiceCode AND T.SENDER = Sender AND T.RECEIVER = Receiver AND T.SVC_TYPE = ServiceType;
		END IF;
		
	END;
	
	CREATE PROCEDURE SPLIT(IN SRC CHARACTER, IN DELIM CHARACTER)
	BEGIN
		DECLARE P INTEGER;
		DECLARE Q INTEGER 1;
		SET OutputLocalEnvironment.Split.Columns = NULL;
		IF SRC IS NULL THEN
			RETURN;
		END IF;
		IF DELIM IS NULL OR DELIM = '' THEN
			SET OutputLocalEnvironment.Split.Columns[1] = SRC;
			RETURN;
		END IF;
		REPEAT
			SET P = POSITION(DELIM IN SRC);
			IF P = 0 THEN
				SET OutputLocalEnvironment.Split.Columns[Q] = SRC;
			ELSE 
				SET OutputLocalEnvironment.Split.Columns[Q] = LEFT(SRC, P - 1);
				SET SRC = SUBSTRING(SRC FROM P + LENGTH(DELIM));
				SET Q = Q + 1;
			END IF;
		UNTIL P = 0
		END REPEAT;
	END;
END MODULE;
