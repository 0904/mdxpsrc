BROKER SCHEMA db


CREATE COMPUTE MODULE dbmaintenanceservice_dbservicehandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DECLARE Result BOOLEAN;
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(OutputRoot.XMLNSC.Msg.Body.Services.Service[]);
		WHILE I <= J DO
			DECLARE RF_Service REFERENCE TO OutputRoot.XMLNSC.Msg.Body.Services.Service[I];
			IF CONTAINS(OutputRoot.XMLNSC.Msg.Head.Svc_ServiceCode, 'ADD') THEN
				SET Result = DBServiceHandler_add(OutputRoot, RF_Service);
			ELSEIF CONTAINS(OutputRoot.XMLNSC.Msg.Head.Svc_ServiceCode, 'MOD') THEN
				SET Result = DBServiceHandler_mod(OutputRoot, OutputRoot.XMLNSC.Msg.Body.Services.Service[I]);
			ELSEIF CONTAINS(OutputRoot.XMLNSC.Msg.Head.Svc_ServiceCode, 'DEL') THEN
				SET Result = DBServiceHandler_del(OutputRoot, OutputRoot.XMLNSC.Msg.Body.Services.Service[I]);
			ELSE
				SET Result = false;
			END IF;
			
			IF NOT Result THEN 
				PROPAGATE TO TERMINAL 'failure';
			    RETURN FALSE;
			END IF;
			SET I = I + 1;
		END WHILE;
		RETURN TRUE;
	END;

	CREATE FUNCTION DBServiceHandler_add(IN RF_Out REFERENCE, IN RF_Service REFERENCE) RETURNS BOOLEAN
	BEGIN
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE OwnerOrg        CHARACTER;
		DECLARE Owner           CHARACTER;
		DECLARE Enabled_Flag    INTEGER 1;
		DECLARE Type		    CHARACTER;
		DECLARE ServiceCatalog  CHARACTER;
		DECLARE Remark	        CHARACTER;
		DECLARE InsTime	        CHARACTER;
		DECLARE LastUpdTime     CHARACTER;
		DECLARE Creator	        CHARACTER;
		DECLARE Modifier        CHARACTER;
		DECLARE ServiceType		CHARACTER;
		DECLARE ServiceProxyUrl CHARACTER;
		DECLARE ServiceRealUrl 	CHARACTER;
		DECLARE ServiceExample	CHARACTER;
		
		SET ServiceCode = TRIM(RF_Service.Svc_ServiceCode);
		SET ServiceVersion = TRIM(RF_Service.Svc_Version);
		SET OwnerOrg = RF_Service.Svc_Provider_Org;
		SET Owner = RF_Service.Svc_Provider;
		IF CONTAINS(RF_Out.XMLNSC.Msg.Head.Svc_ServiceCode, 'MQ') THEN
		    SET Type = 'M';
		ELSEIF CONTAINS(RF_Out.XMLNSC.Msg.Head.Svc_ServiceCode, 'HTTP') THEN
			SET ServiceCatalog = RF_Service.Svc_Catalog;
			IF ServiceCatalog = 'WS' THEN
		        SET Type = 'W';
			ELSEIF ServiceCatalog = 'REST' THEN
				SET Type = 'R';
			END IF;
		END IF;
		
		IF ServiceCode IS NULL OR ServiceVersion IS NULL OR Type IS NULL THEN
			RETURN FALSE;
		END IF;
		
		SET Remark = RF_Service.Svc_Desc;
		SET InsTime = CURRENT_TIMESTAMP;
		SET LastUpdTime = CURRENT_TIMESTAMP;
		SET Creator = 'Admin';
		SET Modifier = 'Admin';
		SET ServiceType = CAST(RF_Service.Svc_Type AS CHARACTER CCSID 1381);
		SET ServiceProxyUrl = RF_Service.Svc_ProxyUrl;
		SET ServiceRealUrl = RF_Service.Svc_RealUrl;
		SET ServiceExample = RF_Service.Svc_Example;
		
		INSERT INTO Database.ESBDS.ESB.SERVICE(PK_SERVICE,SERVICE_CODE,SERVICE_VERSION,OWNER_ORG,OWNER,ENABLED_FLAG,TYPE,REMARK,INSERT_TIMESTAMP,LAST_UPDATE_TIMESTAMP,CREATOR,MODIFIER,SVC_TYPE,SVC_PROXYURL,SVC_REALURL,SVC_EXAMPLE) VALUES (UUIDASCHAR,ServiceCode,ServiceVersion,OwnerOrg,Owner,Enabled_Flag,Type,Remark,InsTime,LastUpdTime,Creator,Modifier,ServiceType,ServiceProxyUrl,ServiceRealUrl,ServiceExample);
	    RETURN TRUE;
	END;
	
	CREATE FUNCTION DBServiceHandler_mod(IN RF_Out REFERENCE, IN RF_Service REFERENCE) RETURNS BOOLEAN
	BEGIN
		DECLARE ServiceSql      CHARACTER;
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE OwnerOrg        CHARACTER;
		DECLARE Owner           CHARACTER;
		DECLARE Enabled_Flag    INTEGER 1;
		DECLARE Type		    CHARACTER;
		DECLARE ServiceCatalog  CHARACTER;
		DECLARE Remark	        CHARACTER;
		DECLARE LastUpdTime     CHARACTER;
		DECLARE Modifier        CHARACTER;
		DECLARE ServiceType		CHARACTER;
		DECLARE ServiceProxyUrl CHARACTER;
		DECLARE ServiceRealUrl 	CHARACTER;
		DECLARE ServiceExample	CHARACTER;
		
		SET ServiceCode = TRIM(RF_Service.Svc_ServiceCode);
		SET ServiceVersion = TRIM(RF_Service.Svc_Version);
		SET OwnerOrg = RF_Service.Svc_Provider_Org;
		SET Owner = RF_Service.Svc_Provider;
        IF CONTAINS(RF_Out.XMLNSC.Msg.Head.Svc_ServiceCode, 'MQ') THEN
	        SET Type = 'M';
		ELSEIF CONTAINS(RF_Out.XMLNSC.Msg.Head.Svc_ServiceCode, 'HTTP') THEN
			SET ServiceCatalog = RF_Service.Svc_Catalog;
		    IF ServiceCatalog = 'WS' THEN
			    SET Type = 'W';
			ELSEIF ServiceCatalog = 'REST' THEN
				SET Type = 'R';
			END IF;
		END IF;
		
		IF ServiceCode IS NULL OR ServiceVersion IS NULL OR Type IS NULL THEN
			RETURN FALSE;
		END IF;
		
		SET Remark = RF_Service.Svc_Desc;
		SET LastUpdTime = CURRENT_TIMESTAMP;
		SET Modifier = 'Admin';
		SET ServiceType = CAST(RF_Service.Svc_Type AS CHARACTER CCSID 1381);
		SET ServiceProxyUrl = RF_Service.Svc_ProxyUrl;
		SET ServiceRealUrl = RF_Service.Svc_RealUrl;
		SET ServiceExample = RF_Service.Svc_Example;	
		    
		SET ServiceSql = 'UPDATE ESB.SERVICE SET OWNER_ORG=?,OWNER=?,ENABLED_FLAG=?,TYPE=?,REMARK=?,LAST_UPDATE_TIMESTAMP=?,MODIFIER=?,SVC_TYPE=?,SVC_PROXYURL=?,SVC_REALURL=?,SVC_EXAMPLE=? WHERE SERVICE_CODE = ? AND SERVICE_VERSION = ''' || ServiceVersion || '''';
		PASSTHRU(ServiceSql, OwnerOrg, Owner, Enabled_Flag, Type, Remark, LastUpdTime, Modifier, ServiceType, ServiceProxyUrl, ServiceRealUrl, ServiceExample, ServiceCode);
		RETURN TRUE;
	END;
	
	CREATE FUNCTION DBServiceHandler_del(IN RF_Out REFERENCE, IN RF_Service REFERENCE) RETURNS BOOLEAN
	BEGIN
		DECLARE ServiceSql      CHARACTER;
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		
		SET ServiceCode = TRIM(RF_Service.Svc_ServiceCode);
		SET ServiceVersion = TRIM(RF_Service.Svc_Version);
		
		IF ServiceCode IS NULL OR ServiceVersion IS NULL THEN
			RETURN FALSE;
		END IF;
		
		SET ServiceSql = 'DELETE FROM ESB.SERVICE WHERE SERVICE_CODE = ''' || ServiceCode || ''' AND SERVICE_VERSION = ''' || ServiceVersion || '''';
		PASSTHRU(ServiceSql);
		RETURN TRUE;
	END;
END MODULE;
