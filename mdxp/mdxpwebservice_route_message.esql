BROKER SCHEMA mdxp


CREATE COMPUTE MODULE mdxpwebservice_route_message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE ServiceUrl      CHARACTER;
		DECLARE ServiceInfo     ROW;
		DECLARE ResponseCode    INTEGER 0;
		DECLARE ResponseMsg     CHARACTER;
		DECLARE Servicesql      CHARACTER;
		DECLARE SQLState1       CHARACTER;   
        DECLARE SQLErrorText1   CHARACTER;   
        DECLARE SQLCode1        INTEGER;   
        DECLARE SQLNativeError1 INTEGER;
        DECLARE ReceiverOrg     CHARACTER;
		DECLARE Receiver        CHARACTER;
		DECLARE TargetInfo      ROW;
		DECLARE TargetRequestQ  CHARACTER;

		SET ServiceCode = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_ServiceCode);
		SET ServiceVersion = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_Version);
		SET Servicesql = 'SELECT * FROM ESB.SERVICEINFO WHERE SERVICE_CODE = ''' || ServiceCode || ''' AND SERVICE_VERSION = ''' || ServiceVersion || ''' FETCH FIRST 1 ROW ONLY';
		SET ServiceInfo.Service[] = PASSTHRU(Servicesql);
			
		--Retrieve the database return codes --
	    SET SQLState1 = SQLSTATE;
	    SET SQLCode1 = SQLCODE;
	    SET SQLErrorText1 = SQLERRORTEXT;
	    SET SQLNativeError1 = SQLNATIVEERROR;
		
		IF SQLCode1 <> 0 THEN			
			SET ResponseCode = 500;
			SET ResponseMsg = 'Failed to access database. SQLCODE=' || CAST(SQLCode1 AS CHARACTER) || '; SQLNativeError=' || CAST(SQLNativeError1 AS CHARACTER) || '; SQLSTATE=' || SQLState1 || '; SQLErrorText=' || SQLErrorText1;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			RETURN FALSE;
		END IF;
		
		SET ServiceUrl = ServiceInfo.Service.URL;		
		IF ServiceUrl IS NULL OR TRIM(ServiceUrl) = '' THEN
			
			IF EXISTS(OutputRoot.MQMD[]) IS FALSE THEN			
                -- response code 204 if no service 
			    SET ResponseCode = 204;
			    SET ResponseMsg = 'The URL of service (' || ServiceCode || ') is not found in service info table in mdxp.';
			    SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			    SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			    SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
			    PROPAGATE TO TERMINAL 'failure';
			    RETURN FALSE;
			ELSE 
				SET ReceiverOrg = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_Receiver_Org);
		        SET Receiver = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_Receiver);
		        
		        SET Servicesql = 'SELECT TARGET_REQUEST_QUEUE FROM ESB.TARGET_QUEUE_CONFIG WHERE RECEIVER_ORG=? AND RECEIVER=? FETCH FIRST 1 ROW ONLY';
		        SET TargetInfo.Target[] = PASSTHRU(Servicesql, ReceiverOrg, Receiver);
		        SET TargetRequestQ = TRIM(TargetInfo.Target.TARGET_REQUEST_QUEUE);
		        
		        IF TargetRequestQ IS NULL OR TargetRequestQ = '' THEN
		        	SET ResponseCode = 204;
			        SET ResponseMsg = 'The request queue of  (' || Receiver || ') cannot be routed.';
			        SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			        SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			        SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
			        PROPAGATE TO TERMINAL 'failure';
			        RETURN FALSE;				    
		        ELSE
		        	SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = TargetRequestQ;	
		        	PROPAGATE TO TERMINAL 'out1';
			        RETURN FALSE;	        	
		        END IF;
		        
			END IF;
		ELSE
			-- set request URL
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = ServiceUrl;
			-- set message to localenv
			SET OutputLocalEnvironment.output = OutputRoot;
			-- set token
			IF EXISTS(OutputRoot.MQMD[]) IS TRUE THEN
				CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC NAME 'HTTPRequestHeader';
			    SET OutputRoot.HTTPRequestHeader.Authorization = 'Bearer QWRtaW4tZjJlNTVjZTEtYzk4NC00MzgzLTkxYjctMGRlNGRjNmExNjgx';
			END IF;

			RETURN TRUE;
		END IF;
	END;
END MODULE;
