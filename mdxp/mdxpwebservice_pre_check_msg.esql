BROKER SCHEMA mdxp


CREATE COMPUTE MODULE mdxpwebservice_pre_check_msg
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- copy message
		SET OutputRoot = InputRoot;
		DECLARE Result BOOLEAN;
		SET Result = PreCheckMessage();
		IF Result THEN
			RETURN TRUE;
		ELSE 
			PROPAGATE TO TERMINAL 'failure';
			RETURN FALSE;
		END IF;
	END;

	CREATE FUNCTION PreCheckMessage() RETURNS BOOLEAN 
	BEGIN
		DECLARE ServiceCode     CHARACTER;
		DECLARE ServiceVersion  CHARACTER;
		DECLARE SenderOrg       CHARACTER;
		DECLARE Sender          CHARACTER;
		DECLARE ReceiverOrg     CHARACTER;
		DECLARE Receiver        CHARACTER;
		DECLARE ResponseCode    INTEGER 0;
		DECLARE ResponseMsg     CHARACTER;
		DECLARE Servicesql      CHARACTER;
		DECLARE ServiceInfo     ROW;
		DECLARE SQLState1       CHARACTER;   
        DECLARE SQLErrorText1   CHARACTER;   
        DECLARE SQLCode1        INTEGER;   
        DECLARE SQLNativeError1 INTEGER;
		
		-- validate FTRQ
		SET ServiceCode = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_ServiceCode);
		IF ENDSWITH(ServiceCode,'_IFRQ') THEN
			IF EXISTS(OutputRoot.MQMD[]) IS FALSE THEN		
				SET ResponseCode = 208;
				SET ResponseMsg = '全表请求只能通过MQ通道处理';
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
				RETURN FALSE;
			END IF;
		END IF;
		
		-- validate service code
		SET ServiceCode = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_ServiceCode);
		IF ServiceCode IS NULL OR TRIM(ServiceCode) = '' THEN			
			SET ResponseCode = 202;
			SET ResponseMsg = 'The ServiceCode (' || ServiceCode || ') shoud not be null.';
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
			RETURN FALSE;
		END IF;
		
		-- validate service version
		SET ServiceVersion = TRIM(InputRoot.XMLNSC.Msg.Head.Svc_Version);
		IF ServiceVersion IS NULL OR TRIM(ServiceVersion) = '' THEN			
			SET ResponseCode = 202;
			SET ResponseMsg = 'The ServiceVersion (' || ServiceVersion || ') shoud not be null.';
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
			RETURN FALSE;
		END IF;
		
		-- validate sender org
		SET SenderOrg = InputRoot.XMLNSC.Msg.Head.Svc_Sender_Org;
		IF SenderOrg IS NULL OR TRIM(SenderOrg) = '' THEN			
			SET ResponseCode = 202;
			SET ResponseMsg = 'The sender orgranization (' || SenderOrg || ') shoud not be null.';
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
			RETURN FALSE;
		END IF;
		
		-- validate sender
		SET Sender = InputRoot.XMLNSC.Msg.Head.Svc_Sender;
		IF Sender IS NULL OR TRIM(SenderOrg) = '' THEN			
			SET ResponseCode = 202;
			SET ResponseMsg = 'The sender (' || Sender || ') shoud not be null.';
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
			SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
			RETURN FALSE;
		END IF;
		
		-- validate receiver org and receiver
		SET ReceiverOrg = InputRoot.XMLNSC.Msg.Head.Svc_Receiver_Org;
		SET Receiver = InputRoot.XMLNSC.Msg.Head.Svc_Receiver;
		
		IF ReceiverOrg IS NULL OR Receiver IS NULL OR TRIM(ReceiverOrg) = '' OR TRIM(Receiver) = '' THEN
			-- look up routing table to get receiver
			SET Servicesql = 'SELECT * FROM ESB.ROUTE_CONFIG WHERE SERVICE_CODE = ''' || ServiceCode || ''' AND SERVICE_VERSION = ''' || ServiceVersion || ''' FETCH FIRST 1 ROW ONLY';
			SET ServiceInfo.Service[] = PASSTHRU(Servicesql);
		
			--Retrieve the database return codes --
	        SET SQLState1 = SQLSTATE;
	        SET SQLCode1 = SQLCODE;
	        SET SQLErrorText1 = SQLERRORTEXT;
	        SET SQLNativeError1 = SQLNATIVEERROR;
			
			IF SQLCode1 <> 0 THEN				
				SET ResponseCode = 500;
				SET ResponseMsg = 'Failed to access database. SQLCODE=' || CAST(SQLCode1 AS CHARACTER) || '; SQLNativeError=' || CAST(SQLNativeError1 AS CHARACTER) || '; SQLSTATE=' || SQLState1 || '; SQLErrorText=' || SQLErrorText1;
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
				RETURN FALSE;
			END IF;
		
			SET ReceiverOrg = ServiceInfo.Service.RECEIVER_ORG;
			SET Receiver = ServiceInfo.Service.RECEIVER;		
			IF ReceiverOrg IS NULL OR Receiver IS NULL OR TRIM(ReceiverOrg) = '' OR TRIM(Receiver) = '' THEN
				-- response code 204 if no receiver 
			    SET ResponseCode = 204;
				SET ResponseMsg = 'The service (' || ServiceCode || ') is not present in routing table with senderorg (' || SenderOrg || ') and sender (' || Sender || ')  in mdxp.';
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateCode = CAST(ResponseCode AS CHARACTER);
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateDesc = ResponseMsg;
				SET OutputRoot.XMLNSC.Msg.Body.Response.Svc_StateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHMMssSSS');
				RETURN FALSE;
			END IF;
			-- set ReceiverOrg and Receiver when record found
			SET OutputRoot.XMLNSC.Msg.Head.Svc_Receiver_Org = ReceiverOrg;
			SET OutputRoot.XMLNSC.Msg.Head.Svc_Receiver = Receiver;
		END IF;
		RETURN TRUE;
	END;
END MODULE;